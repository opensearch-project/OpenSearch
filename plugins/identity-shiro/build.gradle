/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

apply plugin: 'opensearch.internal-cluster-test'

opensearchplugin {
  description = 'Plugin for identity features in OpenSearch.'
  classname = 'org.opensearch.identity.shiro.ShiroIdentityPlugin'
  name = project.name
  licenseFile = rootProject.file('licenses/APACHE-LICENSE-2.0.txt')
  noticeFile = rootProject.file('NOTICE.txt')
}

dependencies {
  implementation 'org.apache.shiro:shiro-core:1.13.0'

  // Needed for shiro
  implementation "org.slf4j:slf4j-api:${versions.slf4j}"

  implementation 'commons-beanutils:commons-beanutils:1.9.4'
  implementation 'commons-logging:commons-logging:1.2'
  implementation 'commons-lang:commons-lang:2.6'

  implementation 'org.passay:passay:1.6.3'

  implementation "org.bouncycastle:bcprov-jdk18on:${versions.bouncycastle}"

  testImplementation project(path: ':modules:transport-netty4') // for http
  testImplementation project(path: ':plugins:transport-nio') // for http
  testImplementation "org.mockito:mockito-core:${versions.mockito}"
  testImplementation project(path: ':client:rest-high-level')
  testImplementation 'junit:junit:4.13.2'
}

/*
 * We have to disable setting the number of available processors as tests in the same JVM randomize processors and will step on each
 * other if we allow them to set the number of available processors as it's set-once in Netty.
 */
test {
  systemProperty 'opensearch.set.netty.runtime.available.processors', 'false'
}

internalClusterTest {
  systemProperty 'opensearch.set.netty.runtime.available.processors', 'false'
}

thirdPartyAudit.ignoreMissingClasses(
  'com.google.common.hash.BloomFilter',
  'javax.servlet.ServletContextEvent',
  'javax.servlet.ServletContextListener',
  'org.apache.avalon.framework.logger.Logger',
  'org.apache.commons.collections.Closure',
  'org.apache.commons.collections.FastHashMap',
  'org.apache.commons.collections.Predicate',
  'org.apache.commons.collections.Transformer',
  'org.apache.commons.collections.comparators.ComparableComparator',
  'org.apache.commons.collections.keyvalue.AbstractMapEntry',
  'org.apache.commons.configuration2.interpol.ConfigurationInterpolator',
  'org.apache.log.Hierarchy',
  'org.apache.log.Logger',
  'org.apache.log4j.Level',
  'org.apache.log4j.Logger',
  'org.apache.log4j.Priority',
  'org.cryptacular.bean.HashBean',
  'org.slf4j.impl.StaticLoggerBinder',
  'org.slf4j.impl.StaticMDCBinder',
  'org.slf4j.impl.StaticMarkerBinder',
  'org.springframework.context.MessageSource',
  'org.springframework.context.support.MessageSourceAccessor'
)
