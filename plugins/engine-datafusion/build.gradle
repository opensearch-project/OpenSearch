/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'opensearch.internal-cluster-test'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.pluginzip'

def pluginName = 'engine-datafusion'
def pluginDescription = 'OpenSearch plugin providing access to DataFusion via JNI'
def projectPath = 'org.opensearch'
def pathToPlugin = 'datafusion.DataFusionPlugin'
def pluginClassName = 'DataFusionPlugin'

opensearchplugin {
    name = pluginName
    description = pluginDescription
    classname = "${projectPath}.${pathToPlugin}"
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

dependencies {
    implementation "org.apache.logging.log4j:log4j-api:${versions.log4j}"
    implementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"

    // Bundle Jackson in the plugin JAR using 'api' like other OpenSearch plugins
    api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson_databind}"
    api "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"

    // Apache Arrow dependencies for memory management
    implementation "org.apache.arrow:arrow-memory-core:17.0.0"
    implementation "org.apache.arrow:arrow-memory-unsafe:17.0.0"
    implementation "org.apache.arrow:arrow-vector:17.0.0"
    implementation "org.apache.arrow:arrow-c-data:17.0.0"
    implementation "org.apache.arrow:arrow-format:17.0.0"
    // SLF4J API for Arrow logging compatibility
    implementation "org.slf4j:slf4j-api:2.0.17"
    // CheckerFramework annotations required by Arrow 17.0.0
    implementation "org.checkerframework:checker-qual:3.42.0"
    // FlatBuffers dependency required by Arrow 17.0.0
    implementation "com.google.flatbuffers:flatbuffers-java:23.5.26"

    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
}

// Task to build the Rust JNI library
task buildRustLibrary(type: Exec) {
    description = 'Build the Rust JNI library using Cargo'
    group = 'build'

    workingDir file('jni')

    // Determine the target directory and library name based on OS
    def osName = System.getProperty('os.name').toLowerCase()
    def libPrefix = osName.contains('windows') ? '' : 'lib'
    def libExtension = osName.contains('windows') ? '.dll' : (osName.contains('mac') ? '.dylib' : '.so')

    // Use debug build for development, release for production
    def buildType = project.hasProperty('rustRelease') ? 'release' : 'debug'
    def targetDir = "target/${buildType}"

    def cargoArgs = ['cargo', 'build']
    if (buildType == 'release') {
        cargoArgs.add('--release')
    }

    if (osName.contains('windows')) {
        commandLine cargoArgs
    } else {
        commandLine cargoArgs
    }

    // Set environment variables for cross-compilation if needed
    environment 'CARGO_TARGET_DIR', file('jni/target').absolutePath

    inputs.files fileTree('jni/src')
    inputs.file 'jni/Cargo.toml'
    outputs.files file("jni/${targetDir}/${libPrefix}opensearch_datafusion_jni${libExtension}")
    System.out.println("Building Rust library in ${buildType} mode");
}

// Task to copy the native library to resources
task copyNativeLibrary(type: Copy, dependsOn: buildRustLibrary) {
    description = 'Copy the native library to Java resources'
    group = 'build'

    def osName = System.getProperty('os.name').toLowerCase()
    def libPrefix = osName.contains('windows') ? '' : 'lib'
    def libExtension = osName.contains('windows') ? '.dll' : (osName.contains('mac') ? '.dylib' : '.so')
    def buildType = project.hasProperty('rustRelease') ? 'release' : 'debug'

    from file("jni/target/${buildType}/${libPrefix}opensearch_datafusion_jni${libExtension}")
    into file('src/main/resources/native')

    // Rename to a standard name for Java to load
    rename { filename ->
        "libopensearch_datafusion_jni${libExtension}"
    }

    // Remove executable permissions to comply with OpenSearch file permission checks
    filePermissions {
        unix(0644)
    }
}

// Ensure native library is built before Java compilation
compileJava.dependsOn copyNativeLibrary

// Ensure processResources depends on copyNativeLibrary
processResources.dependsOn copyNativeLibrary

// Ensure sourcesJar depends on copyNativeLibrary since it includes resources
sourcesJar.dependsOn copyNativeLibrary

// Ensure filepermissions task depends on copyNativeLibrary
tasks.named("filepermissions").configure {
    dependsOn copyNativeLibrary
}

// Ensure forbiddenPatterns task depends on copyNativeLibrary
tasks.named("forbiddenPatterns").configure {
    dependsOn copyNativeLibrary
    // Exclude native library files from pattern checking since they are binary
    exclude '**/native/**'
}

// Ensure spotlessJava task has proper dependency ordering
tasks.named("spotlessJava").configure {
    mustRunAfter copyNativeLibrary
}

// Clean task should also clean Rust artifacts
clean {
    delete file('jni/target')
    delete file('src/main/resources/native')
}

test {
    // Set system property to help tests find the native library
    systemProperty 'java.library.path', file('src/main/resources/native').absolutePath
}

yamlRestTest {
    systemProperty 'tests.security.manager', 'false'
    // Disable yamlRestTest since this plugin doesn't have REST API endpoints
    enabled = false
}

tasks.named("dependencyLicenses").configure {
    mapping from: /jackson-.*/, to: 'jackson'
    mapping from: /arrow-.*/, to: 'arrow'
    mapping from: /slf4j-.*/, to: 'slf4j-api'
    mapping from: /checker-qual.*/, to: 'checker-qual'
    mapping from: /flatbuffers-.*/, to: 'flatbuffers-java'
}

// Configure third party audit to handle Apache Arrow dependencies
tasks.named('thirdPartyAudit').configure {
    ignoreMissingClasses(
        // Apache Commons Codec (missing dependency)
        'org.apache.commons.codec.binary.Hex'
    )
    ignoreViolations(
        // Apache Arrow internal classes that use Unsafe operations
        'org.apache.arrow.memory.ArrowBuf',
        'org.apache.arrow.memory.unsafe.UnsafeAllocationManager',
        'org.apache.arrow.memory.util.ByteFunctionHelpers',
        'org.apache.arrow.memory.util.MemoryUtil',
        'org.apache.arrow.memory.util.MemoryUtil$1',
        'org.apache.arrow.memory.util.hash.MurmurHasher',
        'org.apache.arrow.memory.util.hash.SimpleHasher',
        'org.apache.arrow.vector.BaseFixedWidthVector',
        'org.apache.arrow.vector.BitVectorHelper',
        'org.apache.arrow.vector.Decimal256Vector',
        'org.apache.arrow.vector.DecimalVector',
        'org.apache.arrow.vector.util.DecimalUtility',
        'org.apache.arrow.vector.util.VectorAppender'
    )
}

// Configure Javadoc to skip package documentation requirements ie package-info.java
missingJavadoc {
    javadocMissingIgnore = [
        'org.opensearch.datafusion',
        'org.opensearch.datafusion.action',
        'org.opensearch.datafusion.core'
    ]
}
