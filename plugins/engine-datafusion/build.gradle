/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'opensearch.internal-cluster-test'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.pluginzip'

def pluginName = 'engine-datafusion'
def pluginDescription = 'OpenSearch plugin providing access to DataFusion via JNI'
def projectPath = 'org.opensearch'
def pathToPlugin = 'datafusion.DataFusionPlugin'
def pluginClassName = 'DataFusionPlugin'

opensearchplugin {
    name = pluginName
    description = pluginDescription
    classname = "${projectPath}.${pathToPlugin}"
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

dependencies {
    implementation "org.apache.logging.log4j:log4j-api:${versions.log4j}"
    implementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
}

// Task to build the Rust JNI library
task buildRustLibrary(type: Exec) {
    description = 'Build the Rust JNI library using Cargo'
    group = 'build'

    workingDir file('jni')

    // Determine the target directory and library name based on OS
    def osName = System.getProperty('os.name').toLowerCase()
    def libPrefix = osName.contains('windows') ? '' : 'lib'
    def libExtension = osName.contains('windows') ? '.dll' : (osName.contains('mac') ? '.dylib' : '.so')

    // Use debug build for development, release for production
    def buildType = project.hasProperty('rustRelease') ? 'release' : 'debug'
    def targetDir = "target/${buildType}"

    def cargoArgs = ['cargo', 'build']
    if (buildType == 'release') {
        cargoArgs.add('--release')
    }

    if (osName.contains('windows')) {
        commandLine cargoArgs
    } else {
        commandLine cargoArgs
    }

    // Set environment variables for cross-compilation if needed
    environment 'CARGO_TARGET_DIR', file('jni/target').absolutePath

    inputs.files fileTree('jni/src')
    inputs.file 'jni/Cargo.toml'
    outputs.files file("jni/${targetDir}/${libPrefix}opensearch_datafusion_jni${libExtension}")
    System.out.println("Building Rust library in ${buildType} mode");
}

// Task to copy the native library to resources
task copyNativeLibrary(type: Copy, dependsOn: buildRustLibrary) {
    description = 'Copy the native library to Java resources'
    group = 'build'

    def osName = System.getProperty('os.name').toLowerCase()
    def libPrefix = osName.contains('windows') ? '' : 'lib'
    def libExtension = osName.contains('windows') ? '.dll' : (osName.contains('mac') ? '.dylib' : '.so')
    def buildType = project.hasProperty('rustRelease') ? 'release' : 'debug'

    from file("jni/target/${buildType}/${libPrefix}opensearch_datafusion_jni${libExtension}")
    into file('src/main/resources/native')

    // Rename to a standard name for Java to load
    rename { filename ->
        "libopensearch_datafusion_jni${libExtension}"
    }
}

// Ensure native library is built before Java compilation
compileJava.dependsOn copyNativeLibrary

// Ensure processResources depends on copyNativeLibrary
processResources.dependsOn copyNativeLibrary

// Clean task should also clean Rust artifacts
clean {
    delete file('jni/target')
    delete file('src/main/resources/native')
}

test {
    // Set system property to help tests find the native library
    systemProperty 'java.library.path', file('src/main/resources/native').absolutePath
}

yamlRestTest {
    systemProperty 'tests.security.manager', 'false'
}
