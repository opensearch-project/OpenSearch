/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

import org.opensearch.gradle.info.BuildParams
import org.opensearch.gradle.test.RestIntegTestTask
import org.opensearch.gradle.test.TestTask
import org.opensearch.gradle.test.rest.JavaRestTestPlugin
import org.opensearch.gradle.test.InternalClusterTestPlugin

apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.java-rest-test'
apply plugin: 'opensearch.internal-cluster-test'
apply from: "$rootDir/gradle/fips.gradle"

// The transport-reactor-netty4 plugin is published to maven
apply plugin: 'opensearch.publish'

opensearchplugin {
  description = 'Reactor Netty 4 based transport implementation'
  classname = 'org.opensearch.transport.reactor.ReactorNetty4Plugin'
  hasClientJar = true
}

dependencies {
  // network stack
  api libs.bundles.netty

  api libs.bundles.reactornetty
  api libs.netty.codec.http3

  testImplementation libs.log4jslf4jimpl
  javaRestTestImplementation libs.reactor.test
  testImplementation project(":modules:transport-netty4")
  testFipsRuntimeOnly "org.bouncycastle:bc-fips:${versions.bouncycastle_jce}"
  testFipsRuntimeOnly "org.bouncycastle:bcpkix-fips:${versions.bouncycastle_pkix}"
  testFipsRuntimeOnly "org.bouncycastle:bcutil-fips:${versions.bouncycastle_util}"
}

restResources {
  restApi {
    includeCore '_common', 'cluster', 'nodes'
  }
}

tasks.named("dependencyLicenses").configure {
  mapping from: /netty-.*/, to: 'netty'
  mapping from: /reactor-.*/, to: 'reactor'
}

// TODO: Remove that once we have a complete test suite
testingConventions.enabled = false

test {
  /*
   * We have to disable setting the number of available processors as tests in the same JVM randomize processors and will step on each
   * other if we allow them to set the number of available processors as it's set-once in Netty.
   */
  systemProperty 'opensearch.set.netty.runtime.available.processors', 'false'
}

internalClusterTest {
  systemProperty 'opensearch.set.netty.runtime.available.processors', 'false'
}

javaRestTest {
  systemProperty 'opensearch.set.netty.runtime.available.processors', 'false'
}

testClusters.javaRestTest {
  setting 'http.type', 'reactor-netty4'
}

thirdPartyAudit {
  ignoreMissingClasses(
    'com.aayushatharva.brotli4j.Brotli4jLoader',
    'com.aayushatharva.brotli4j.decoder.DecoderJNI$Status',
    'com.aayushatharva.brotli4j.decoder.DecoderJNI$Wrapper',
    'com.aayushatharva.brotli4j.encoder.BrotliEncoderChannel',
    'com.aayushatharva.brotli4j.encoder.Encoder$Mode',
    'com.aayushatharva.brotli4j.encoder.Encoder$Parameters',
    // classes are missing

    // from io.netty.logging.CommonsLoggerFactory (netty)
    'org.apache.commons.logging.Log',
    'org.apache.commons.logging.LogFactory',

    // from Log4j (deliberate, Netty will fallback to Log4j 2)
    'org.apache.log4j.Level',
    'org.apache.log4j.Logger',

    // from io.netty.handler.ssl.OpenSslEngine (netty)
    'io.netty.internal.tcnative.Buffer',
    'io.netty.internal.tcnative.CertificateCompressionAlgo',
    'io.netty.internal.tcnative.Library',
    'io.netty.internal.tcnative.SSL',
    'io.netty.internal.tcnative.SSLContext',
    'io.netty.internal.tcnative.SSLPrivateKeyMethod',

    // from io.netty.handler.ssl.util.BouncyCastleSelfSignedCertGenerator (netty)
    'org.bouncycastle.cert.X509v3CertificateBuilder',
    'org.bouncycastle.cert.jcajce.JcaX509CertificateConverter',
    'org.bouncycastle.operator.jcajce.JcaContentSignerBuilder',
    'org.bouncycastle.openssl.PEMEncryptedKeyPair',
    'org.bouncycastle.openssl.PEMParser',
    'org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter',
    'org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder',
    'org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder',
    'org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo',

    // from io.netty.util.internal.logging.InternalLoggerFactory (netty) - it's optional
    'org.slf4j.helpers.FormattingTuple',
    'org.slf4j.helpers.MessageFormatter',
    'org.slf4j.Logger',
    'org.slf4j.LoggerFactory',
    'org.slf4j.spi.LocationAwareLogger',

    'com.ning.compress.BufferRecycler',
    'com.ning.compress.lzf.ChunkDecoder',
    'com.ning.compress.lzf.ChunkEncoder',
    'com.ning.compress.lzf.LZFChunk',
    'com.ning.compress.lzf.LZFEncoder',
    'com.ning.compress.lzf.util.ChunkDecoderFactory',
    'com.ning.compress.lzf.util.ChunkEncoderFactory',
    'lzma.sdk.lzma.Encoder',
    'net.jpountz.lz4.LZ4Compressor',
    'net.jpountz.lz4.LZ4Factory',
    'net.jpountz.lz4.LZ4FastDecompressor',
    'net.jpountz.xxhash.XXHash32',
    'net.jpountz.xxhash.XXHashFactory',
    'io.netty.internal.tcnative.AsyncSSLPrivateKeyMethod',
    'io.netty.internal.tcnative.AsyncTask',
    'io.netty.internal.tcnative.CertificateCallback',
    'io.netty.internal.tcnative.CertificateVerifier',
    'io.netty.internal.tcnative.ResultCallback',
    'io.netty.internal.tcnative.SessionTicketKey',
    'io.netty.internal.tcnative.SniHostNameMatcher',
    'io.netty.internal.tcnative.SSL',
    'io.netty.internal.tcnative.SSLSession',
    'io.netty.internal.tcnative.SSLSessionCache',
    'io.netty.channel.epoll.Epoll',
    'io.netty.channel.epoll.EpollDatagramChannel',
    'io.netty.channel.epoll.EpollServerSocketChannel',
    'io.netty.channel.epoll.EpollSocketChannel',
    'io.netty.channel.kqueue.KQueue',
    'io.netty.channel.kqueue.KQueueDatagramChannel',
    'io.netty.channel.kqueue.KQueueServerSocketChannel',
    'io.netty.channel.kqueue.KQueueSocketChannel',
    'io.netty.handler.codec.haproxy.HAProxyMessage',
    'io.netty.handler.codec.haproxy.HAProxyMessageDecoder',
    'io.netty.handler.proxy.ProxyHandler',
    'io.netty.channel.epoll.EpollIoHandle',
    'io.netty.channel.epoll.EpollIoHandler',
    'io.netty.channel.kqueue.KQueueIoHandle',
    'io.netty.channel.kqueue.KQueueIoHandler',
    'io.netty.channel.uring.IoUring',
    'io.netty.channel.uring.IoUringDatagramChannel',
    'io.netty.channel.uring.IoUringIoHandle',
    'io.netty.channel.uring.IoUringIoHandler',
    'io.netty.channel.uring.IoUringServerSocketChannel',
    'io.netty.channel.uring.IoUringSocketChannel',
    'io.netty.handler.codec.quic.QuicChannel',
    'io.netty.handler.codec.quic.QuicChannelBootstrap',
    'io.netty.handler.codec.quic.QuicClientCodecBuilder',
    'io.netty.handler.codec.quic.QuicCodecBuilder',
    'io.netty.handler.codec.quic.QuicException',
    'io.netty.handler.codec.quic.QuicServerCodecBuilder',
    'io.netty.handler.codec.quic.QuicSslContext',
    'io.netty.handler.codec.quic.QuicSslContextBuilder',
    'io.netty.handler.codec.quic.QuicSslEngine',
    'io.netty.handler.codec.quic.QuicStreamChannel',
    'io.netty.handler.codec.quic.QuicStreamChannelBootstrap',
    'io.netty.handler.codec.quic.QuicStreamFrame',
    'io.netty.handler.codec.quic.QuicStreamType',
    'io.netty.handler.codec.quic.QuicTokenHandler',

    'io.netty.pkitesting.CertificateBuilder',
    'io.netty.pkitesting.CertificateBuilder$Algorithm',
    'io.netty.pkitesting.X509Bundle',

    'org.conscrypt.AllocatedBuffer',
    'org.conscrypt.BufferAllocator',
    'org.conscrypt.Conscrypt',
    'org.conscrypt.HandshakeListener',

    'reactor.blockhound.BlockHound$Builder',
    'reactor.blockhound.integration.BlockHoundIntegration',

    'io.micrometer.common.KeyValue',
    'io.micrometer.common.KeyValues',
    'io.micrometer.common.docs.KeyName',
    'io.micrometer.context.ContextAccessor',
    'io.micrometer.core.instrument.Counter',
    'io.micrometer.core.instrument.Counter$Builder',
    'io.micrometer.core.instrument.DistributionSummary',
    'io.micrometer.core.instrument.DistributionSummary$Builder',
    'io.micrometer.core.instrument.Gauge',
    'io.micrometer.core.instrument.Gauge$Builder',
    'io.micrometer.core.instrument.Meter',
    'io.micrometer.core.instrument.Meter$Type',
    'io.micrometer.core.instrument.MeterRegistry',
    'io.micrometer.core.instrument.Metrics',
    'io.micrometer.core.instrument.Tags',
    'io.micrometer.core.instrument.Timer',
    'io.micrometer.core.instrument.Timer$Builder',
    'io.micrometer.core.instrument.Timer$Sample',
    'io.micrometer.core.instrument.composite.CompositeMeterRegistry',
    'io.micrometer.core.instrument.docs.MeterDocumentation',
    'io.micrometer.core.instrument.observation.MeterObservationHandler',
    'io.micrometer.observation.Observation',
    'io.micrometer.observation.Observation$Context',
    'io.micrometer.observation.ObservationHandler',
    'io.micrometer.observation.ObservationRegistry',
    'io.micrometer.observation.ObservationRegistry$ObservationConfig',
    'io.micrometer.observation.docs.ObservationDocumentation',
    'io.micrometer.observation.transport.ReceiverContext',
    'io.micrometer.observation.transport.RequestReplyReceiverContext',
    'io.micrometer.observation.transport.RequestReplySenderContext',
    'io.micrometer.observation.transport.SenderContext',
    'io.micrometer.tracing.Span',
    'io.micrometer.tracing.Tracer',
    'io.micrometer.tracing.docs.SpanDocumentation',
    'io.micrometer.tracing.handler.DefaultTracingObservationHandler',
    'io.micrometer.tracing.handler.PropagatingReceiverTracingObservationHandler',
    'io.micrometer.tracing.handler.PropagatingSenderTracingObservationHandler',
    'io.micrometer.tracing.propagation.Propagator'
  )

  ignoreViolations(
    'io.netty.util.internal.PlatformDependent0',
    'io.netty.util.internal.PlatformDependent0$1',
    'io.netty.util.internal.PlatformDependent0$2',
    'io.netty.util.internal.PlatformDependent0$3',
    'io.netty.util.internal.PlatformDependent0$5',
    'io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueConsumerNodeRef',
    'io.netty.util.internal.shaded.org.jctools.queues.BaseLinkedQueueProducerNodeRef',
    'io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields',
    'io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields',
    'io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields',
    'io.netty.util.internal.shaded.org.jctools.queues.LinkedQueueNode',
    'io.netty.util.internal.shaded.org.jctools.queues.MpmcArrayQueueConsumerIndexField',
    'io.netty.util.internal.shaded.org.jctools.queues.MpmcArrayQueueProducerIndexField',
    'io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField',
    'io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField',
    'io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField',
    'io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueConsumerIndexField',
    'io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueProducerIndexField',
    'io.netty.util.internal.shaded.org.jctools.queues.unpadded.MpscUnpaddedArrayQueueProducerLimitField',
    'io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess',
    'io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess',
    'io.netty.util.internal.shaded.org.jctools.util.UnsafeLongArrayAccess',
    'io.netty.buffer.AbstractAllocatorEvent',
    'io.netty.buffer.AbstractBufferEvent',
    'io.netty.buffer.AbstractChunkEvent',
    'io.netty.buffer.AdaptivePoolingAllocator$AdaptiveByteBuf',
    'io.netty.buffer.AdaptivePoolingAllocator$Chunk',
    'io.netty.buffer.AllocateBufferEvent',
    'io.netty.buffer.AllocateChunkEvent',
    'io.netty.buffer.FreeBufferEvent',
    'io.netty.buffer.FreeChunkEvent',
    'io.netty.buffer.PooledByteBufAllocator',
    'io.netty.buffer.ReallocateBufferEvent',
    'io.netty.buffer.ReturnChunkEvent'
  )
}
