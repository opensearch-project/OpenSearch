/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

package org.opensearch.search.query;

import java.util.Optional;
import java.util.function.Function;

/**
 * {@link HybridQueryExecutorCollector} is a generic Collector used by Hybrid Search Query during
 * Query phase to parallelize sub query's action to improve latency
 */
public final class HybridQueryExecutorCollector<I, R> {

    // will be used as input for all instances of collector generated by newCollector method,
    // if it is required for collect operation
    private final I param;

    // getResult should only be called after collector's collect method is invoked.
    private volatile Optional<R> result = Optional.empty();

    // Package-private static factory method
    static <I, R> HybridQueryExecutorCollector<I, R> newCollector(final I param) {
        return new HybridQueryExecutorCollector<>(param);
    }

    // Package-private constructor
    HybridQueryExecutorCollector(I param) {
        this.param = param;
    }

    /**
     * Called once for every time an action has to be performed on this Collector
     * @param action function that will be executed and result will be stored at result.
     */
    public synchronized void collect(Function<I, R> action) {
        result = Optional.ofNullable(action.apply(param));
    }

    public synchronized Optional<R> getResult() {
        return result;
    }
}
