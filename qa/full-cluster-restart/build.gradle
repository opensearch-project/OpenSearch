/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import org.opensearch.gradle.Version
import org.opensearch.gradle.info.BuildParams
import org.opensearch.gradle.testclusters.StandaloneRestIntegTestTask

apply plugin: 'opensearch.testclusters'
apply plugin: 'opensearch.standalone-test'
apply from : "$rootDir/gradle/bwc-test.gradle"

for (Version bwcVersion : BuildParams.bwcVersions.indexCompatible) {
  String baseName = "v${bwcVersion}"

  testClusters {
    "${baseName}" {
      versions = [bwcVersion.toString(), project.version]
      numberOfNodes = 2
      // some tests rely on the translog not being flushed
      setting 'indices.memory.shard_inactive_time', '60m'
      setting 'http.content_type.required', 'true'
      setting 'path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
    }
  }

  tasks.register("${baseName}#oldClusterTest", StandaloneRestIntegTestTask) {
    useCluster project, testClusters."${baseName}"
    mustRunAfter(precommit)
    doFirst {
      delete("${buildDir}/cluster/shared/repo/${baseName}")
    }

    systemProperty 'tests.is_old_cluster', 'true'
  }

  tasks.register("${baseName}#upgradedClusterTest", StandaloneRestIntegTestTask) {
    useCluster project, testClusters."${baseName}"
    dependsOn "${baseName}#oldClusterTest"
    doFirst {
      testClusters."${baseName}".goToNextVersion()
    }
    systemProperty 'tests.is_old_cluster', 'false'
  }

  String oldVersion = bwcVersion.toString().minus("-SNAPSHOT")
  tasks.matching { it.name.startsWith(baseName) && it.name.endsWith("ClusterTest") }.configureEach {
    it.systemProperty 'tests.old_cluster_version', oldVersion
    it.systemProperty 'tests.path.repo', "${buildDir}/cluster/shared/repo/${baseName}"
    it.nonInputProperties.systemProperty('tests.rest.cluster', "${-> testClusters."${baseName}".allHttpSocketURI.join(",")}")
    it.nonInputProperties.systemProperty('tests.clustername', "${-> testClusters."${baseName}".getName()}")
  }

  tasks.register(bwcTaskName(bwcVersion)) {
    dependsOn tasks.named("${baseName}#upgradedClusterTest")
  }
}

configurations {
  testArtifacts.extendsFrom testRuntime
  testArtifacts.extendsFrom testImplementation
}

TaskProvider testJar = tasks.register("testJar", Jar) {
  archiveAppendix = 'test'
  from sourceSets.test.output
}

artifacts {
  testArtifacts testJar
}
