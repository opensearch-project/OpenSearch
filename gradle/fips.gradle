// Create isolated configurations for FIPS-specific dependencies.
// These are used to isolate BC FIPS libraries from regular build classpaths,
// avoiding accidental propagation to non-FIPS code paths.
def fipsOnly = project.configurations.maybeCreate("fipsOnly")
def fipsRuntimeOnly = configurations.maybeCreate("fipsRuntimeOnly")
def testFipsOnly = configurations.maybeCreate("testFipsOnly")
def testFipsRuntimeOnly = configurations.maybeCreate("testFipsRuntimeOnly")

// Map standard Gradle configurations to one or more custom FIPS configurations
def fipsWiring = [
    compileClasspath    : [fipsOnly],
    runtimeClasspath    : [fipsOnly, fipsRuntimeOnly],
    testCompileClasspath: [fipsOnly, testFipsOnly],
    testRuntimeClasspath: [fipsOnly, fipsRuntimeOnly, testFipsOnly, testFipsRuntimeOnly]
]

fipsWiring.each { configName, fipsConfigs ->
  configurations.named(configName).configure {
    extendsFrom(*fipsConfigs)
  }
}

// This prevents unintended BC transitive dependencies (like bcutil, bc-fips) from being pulled in.
afterEvaluate {
  def allFipsConfigs = fipsWiring.values().flatten().toSet();
  allFipsConfigs.each { config ->
    config.dependencies.configureEach { dep ->
      if (dep.metaClass.hasProperty(dep, "transitive")) {
        dep.transitive = false
      }
    }
  }
}
