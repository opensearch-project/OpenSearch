// Create isolated configurations for FIPS-specific dependencies.
// These are used to isolate BC FIPS libraries from regular build classpaths,
// avoiding accidental propagation to non-FIPS code paths.
def fips = project.configurations.maybeCreate("fipsOnly")
def testFips = configurations.maybeCreate("testFipsOnly")

// Wire fipsOnly into main classpaths so that declared dependencies are available for compiling/running
["compileClasspath", "testCompileClasspath", "runtimeClasspath", "testRuntimeClasspath"].each { configName ->
    configurations.named(configName).configure {
        extendsFrom(fips)
    }
}

// Wire testFipsOnly into test-specific classpaths
["testCompileClasspath", "testRuntimeClasspath"].each {configName ->
    configurations.named(configName).configure {
        extendsFrom(testFips)
    }
}

// This prevents unintended BC transitive dependencies (like bcutil, bc-fips) from being pulled in.
afterEvaluate {
    [fips, testFips].each { config ->
        config.dependencies.configureEach { dep ->
            if (dep.metaClass.hasProperty(dep, "transitive")) {
                dep.transitive = false
            }
        }
    }
}
