import org.opensearch.gradle.info.BuildParams

// Configure FIPS dependencies for full Java projects
plugins.withId('java') {
  // Create isolated configurations for FIPS-specific dependencies.
  // These are used to isolate BC FIPS libraries from regular build classpaths,
  // avoiding accidental propagation to non-FIPS code paths.
  def fipsOnly = project.configurations.maybeCreate("fipsOnly")
  def fipsRuntimeOnly = configurations.maybeCreate("fipsRuntimeOnly")
  def testFipsOnly = configurations.maybeCreate("testFipsOnly")
  def testFipsRuntimeOnly = configurations.maybeCreate("testFipsRuntimeOnly")

  // Map standard Gradle configurations to one or more custom FIPS configurations
  def fipsWiring = [
      compileClasspath    : [fipsOnly],
      runtimeClasspath    : [fipsOnly, fipsRuntimeOnly],
      testCompileClasspath: [fipsOnly, testFipsOnly],
      testRuntimeClasspath: [fipsOnly, fipsRuntimeOnly, testFipsOnly, testFipsRuntimeOnly]
  ]

  fipsWiring.each { configName, fipsConfigs ->
    configurations.named(configName).configure {
      extendsFrom(*fipsConfigs)
    }
  }

  // This prevents unintended BC transitive dependencies (like bcutil, bc-fips) from being pulled in.
  afterEvaluate {
    def allFipsConfigs = fipsWiring.values().flatten().toSet();
    allFipsConfigs.each { config ->
      config.dependencies.configureEach { dep ->
        if (dep.metaClass.hasProperty(dep, "transitive")) {
          dep.transitive = false
        }
      }
    }
  }
}

// Configure FIPS dependencies for java-base projects (e.g., StandaloneRestTestPlugin)
// JavaBasePlugin doesn't create all standard configurations, so we only create test-related FIPS configs
plugins.withId('java-base') {
  // Only create test FIPS configurations for java-base projects
  def testFipsOnly = configurations.maybeCreate("testFipsOnly")
  def testFipsRuntimeOnly = configurations.maybeCreate("testFipsRuntimeOnly")

  // Wire FIPS configurations only if the target configurations exist
  afterEvaluate {
    def fipsWiring = [
        testCompileClasspath: [testFipsOnly],
        testRuntimeClasspath: [testFipsOnly, testFipsRuntimeOnly]
    ]

    fipsWiring.each { configName, fipsConfigs ->
      def config = configurations.findByName(configName)
      if (config != null) {
        config.extendsFrom(*fipsConfigs)
      }
    }

    // This prevents unintended BC transitive dependencies (like bcutil, bc-fips) from being pulled in.
    [testFipsOnly, testFipsRuntimeOnly].each { config ->
      config.dependencies.configureEach { dep ->
        if (dep.metaClass.hasProperty(dep, "transitive")) {
          dep.transitive = false
        }
      }
    }
  }
}

plugins.withId('opensearch.testclusters') {
  testClusters.all { cluster ->
    if (BuildParams.isInFipsJvm()) {
      keystorePassword 'notarealpasswordphrase'
      extraConfigFile 'opensearch-fips-truststore.bcfks',
          file("${project.rootDir}/buildSrc/src/main/resources/opensearch-fips-truststore.bcfks")
      cluster.nodes.all { node ->
        node.systemProperty 'javax.net.ssl.trustStore', '${OPENSEARCH_PATH_CONF}/opensearch-fips-truststore.bcfks'
        node.systemProperty 'javax.net.ssl.trustStoreType', 'BCFKS'
        node.systemProperty 'javax.net.ssl.trustStoreProvider', 'BCFIPS'
        node.systemProperty 'javax.net.ssl.trustStorePassword', 'changeit'
      }
    }
  }
}

// Configure regular test tasks (not using testclusters) for FIPS
// This applies to both 'java' and 'java-base' plugins
['java', 'java-base'].each { pluginId ->
  plugins.withId(pluginId) {
    tasks.withType(Test).configureEach { testTask ->
      if (BuildParams.isInFipsJvm()) {
        testTask.systemProperty 'javax.net.ssl.trustStore', "${project.rootDir}/buildSrc/src/main/resources/opensearch-fips-truststore.bcfks"
        testTask.systemProperty 'javax.net.ssl.trustStoreType', 'BCFKS'
        testTask.systemProperty 'javax.net.ssl.trustStoreProvider', 'BCFIPS'
        testTask.systemProperty 'javax.net.ssl.trustStorePassword', 'changeit'
      }
    }
  }
}
