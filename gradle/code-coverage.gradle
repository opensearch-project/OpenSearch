/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

apply plugin: 'jacoco'

repositories {
  mavenCentral()
  gradlePluginPortal()
  // TODO: Find the way to use the repositories from RepositoriesSetupPlugin
  maven {
    url = "https://ci.opensearch.org/ci/dbc/snapshots/lucene/"
  }
}

allprojects {
  plugins.withId('jacoco') {
    jacoco.toolVersion = '0.8.13'
  }
}

tasks.withType(JacocoReport).configureEach {
  group = JavaBasePlugin.VERIFICATION_GROUP

  reports {
    // Code coverage report in HTML and CSV formats are on demand, in case they take extra disk space.
    xml.required = System.getProperty('tests.coverage.report.xml', 'true').toBoolean()
    html.required = System.getProperty('tests.coverage.report.html', 'false').toBoolean()
    csv.required = System.getProperty('tests.coverage.report.csv', 'false').toBoolean()
  }
}

// Enhance jacocoTestReport task to include all test types
allprojects {
  plugins.withId('jacoco') {
    tasks.matching { it.name == 'jacocoTestReport' }.configureEach {
      def executionDataFiles = []
      def sourceSetsList = []
      if (tasks.findByName('test')) {
        executionDataFiles.add("$buildDir/jacoco/test.exec")
        sourceSetsList.add(sourceSets.test)
      }
      if (tasks.findByName('internalClusterTest')) {
        executionDataFiles.add("$buildDir/jacoco/internalClusterTest.exec")
        sourceSetsList.add(sourceSets.internalClusterTest)
      }
      if (tasks.findByName('javaRestTest')) {
        executionDataFiles.add("$buildDir/jacoco/javaRestTest.exec")
        sourceSetsList.add(sourceSets.javaRestTest)
      }
      if (!executionDataFiles.isEmpty()) {
        executionData.setFrom(files(executionDataFiles).filter { it.exists() })
        sourceSets(*sourceSetsList)
      }
      onlyIf {
        file("$buildDir/jacoco/test.exec").exists() ||
          file("$buildDir/jacoco/internalClusterTest.exec").exists() ||
          file("$buildDir/jacoco/javaRestTest.exec").exists()
      }
    }
  }
}

reporting {
  reports {
    testCodeCoverageReport(JacocoCoverageReport) {
      testSuiteName = "test"
    }
    testCodeCoverageReportJavaRestTest(JacocoCoverageReport) {
      testSuiteName = "javaRestTest"
    }
  }
}

// When generating coverage reports without re-running tests, use this approach:
// 1. Run: ./gradlew check  (or any test tasks)
// 2. Run: ./gradlew generateCoverageReports
tasks.register('generateCoverageReports', Exec) {
  description = 'Generate all coverage reports using existing test execution data (without re-running tests)'
  group = JavaBasePlugin.VERIFICATION_GROUP

  def gradlewCmd = System.getProperty("os.name").toLowerCase().contains("windows") ? "gradlew.bat" : "./gradlew"

  // Define the test task types that should be excluded
  def testTasksToExclude = ['test', 'internalClusterTest', 'javaRestTest']

  // Build command line with dynamic exclusions
  def args = ['testCodeCoverageReport', 'testCodeCoverageReportJavaRestTest']
  testTasksToExclude.each { testType ->
    args.addAll(['-x', testType])
  }

  commandLine = [gradlewCmd] + args

  doFirst {
    println "Generating coverage reports from existing test data..."
    println "Excluding test tasks: ${testTasksToExclude.join(', ')}"
  }

  doLast {
    println "Coverage reports generated successfully!"
  }
}

// Only attach to check task if tests.coverage.check is explicitly true
if (System.getProperty("tests.coverage")) {
  project.getTasks().named(JavaBasePlugin.CHECK_TASK_NAME).configure {
    dependsOn(
      tasks.named('testCodeCoverageReport', JacocoReport),
      tasks.named('testCodeCoverageReportJavaRestTest', JacocoReport)
    )
  }
}
