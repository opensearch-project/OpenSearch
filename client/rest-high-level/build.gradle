/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.opensearch.gradle.test.RestIntegTestTask
import org.opensearch.gradle.info.BuildParams

apply plugin: 'opensearch.testclusters'
apply plugin: 'opensearch.build'
apply plugin: 'opensearch.rest-test'
apply plugin: 'opensearch.publish'
apply plugin: 'opensearch.rest-resources'

base {
  group = 'org.opensearch.client'
  archivesName = 'opensearch-rest-high-level-client'
}

restResources {
  //we need to copy the yaml spec so we can check naming (see RestHighlevelClientTests#testApiNamingConventions)
  restApi {
    includeCore '*'
  }
}

dependencies {
  api(project(':server')) {
    exclude group: 'com.google.protobuf'
  }
  api project(':client:rest')
  api project(':modules:mapper-extras')
  api project(':modules:parent-join')
  api project(':modules:aggs-matrix-stats')
  api project(':modules:rank-eval')
  api project(':modules:lang-mustache')

  testImplementation project(':client:test')
  testImplementation project(':test:framework')
  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  //this is needed to make RestHighLevelClientTests#testApiNamingConventions work from IDEs
  testImplementation project(":rest-api-spec")
}

tasks.named('forbiddenApisMain').configure {
  // core does not depend on the httpclient for compile so we add the signatures here. We don't add them for test as they are already
  // specified
  addSignatureFiles 'http-signatures'
  signaturesFiles += files('src/main/resources/forbidden/rest-high-level-signatures.txt')
}

File nodeCert = file("./testnode.crt")
File nodeTrustStore = file("./testnode.jks")
File pkiTrustCert = file("./src/test/resources/org/opensearch/client/security/delegate_pki/testRootCA.crt")

integTest {
  systemProperty 'tests.rest.async', 'false'
  systemProperty 'tests.rest.cluster.username', System.getProperty('tests.rest.cluster.username', 'test_user')
  systemProperty 'tests.rest.cluster.password', System.getProperty('tests.rest.cluster.password', 'test-password')
}

RestIntegTestTask asyncIntegTest = tasks.create("asyncIntegTest", RestIntegTestTask) {
    systemProperty 'tests.rest.async', 'true'
    systemProperty 'tests.rest.cluster.username', System.getProperty('tests.rest.cluster.username', 'test_user')
    systemProperty 'tests.rest.cluster.password', System.getProperty('tests.rest.cluster.password', 'test-password')
}

check.dependsOn(asyncIntegTest)

testClusters.all {
  testDistribution = 'ARCHIVE'
  systemProperty 'opensearch.scripting.update.ctx_in_params', 'false'
  setting 'reindex.remote.allowlist', '[ "[::1]:*", "127.0.0.1:*" ]'

  extraConfigFile 'roles.yml', file('roles.yml')
  user username: System.getProperty('tests.rest.cluster.username', 'test_user'),
    password: System.getProperty('tests.rest.cluster.password', 'test-password'),
    role: System.getProperty('tests.rest.cluster.role', 'admin')
  user username: 'admin_user', password: 'admin-password'

  extraConfigFile nodeCert.name, nodeCert
  extraConfigFile nodeTrustStore.name, nodeTrustStore
  extraConfigFile pkiTrustCert.name, pkiTrustCert

}

thirdPartyAudit.ignoreMissingClasses(
  'org.conscrypt.Conscrypt',
  'org.slf4j.Logger',
  'org.slf4j.LoggerFactory'
)
