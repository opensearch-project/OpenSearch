/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import de.thetaphi.forbiddenapis.gradle.CheckForbiddenApis

apply plugin: 'opensearch.build'
apply plugin: 'opensearch.publish'

java {
  targetCompatibility = JavaVersion.VERSION_11
  sourceCompatibility = JavaVersion.VERSION_11
}

base {
  group = 'org.opensearch.client'
  archivesName = 'opensearch-rest-client'
}

dependencies {
  api "org.apache.httpcomponents.client5:httpclient5:${versions.httpclient5}"
  api "org.apache.httpcomponents.core5:httpcore5:${versions.httpcore5}"
  api "org.apache.httpcomponents.core5:httpcore5-h2:${versions.httpcore5}"
  api "org.apache.httpcomponents.core5:httpcore5-reactive:${versions.httpcore5}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "org.slf4j:slf4j-api:${versions.slf4j}"
  api "org.bouncycastle:bctls-fips:${versions.bouncycastle_tls}"


  // reactor
  api "io.projectreactor:reactor-core:${versions.reactor}"
  api "org.reactivestreams:reactive-streams:${versions.reactivestreams}"

  testImplementation project(":client:test")
  testImplementation project(':libs:opensearch-ssl-config')
  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
  testImplementation "org.mockito:mockito-core:${versions.mockito}"
  testImplementation "org.objenesis:objenesis:${versions.objenesis}"
  testImplementation "net.bytebuddy:byte-buddy:${versions.bytebuddy}"
  testImplementation "net.bytebuddy:byte-buddy-agent:${versions.bytebuddy}"
  testImplementation "org.apache.logging.log4j:log4j-api:${versions.log4j}"
  testImplementation "org.apache.logging.log4j:log4j-core:${versions.log4j}"
  testImplementation "org.apache.logging.log4j:log4j-jul:${versions.log4j}"
  testImplementation "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}"
}

tasks.named("dependencyLicenses").configure {
  mapping from: /bc.*/, to: 'bouncycastle'
}

tasks.withType(CheckForbiddenApis).configureEach {
  //client does not depend on server, so only jdk and http signatures should be checked
  replaceSignatureFiles('jdk-signatures', 'http-signatures')
}

tasks.named('forbiddenApisTest').configure {
  //we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage
  bundledSignatures -= 'jdk-non-portable'
  bundledSignatures += 'jdk-internal'
}

// JarHell is part of es server, which we don't want to pull in
// TODO: Not anymore. Now in :libs:opensearch-core
jarHell.enabled = false

testingConventions {
  naming.clear()
  naming {
    Tests {
      baseClass 'org.opensearch.client.RestClientTestCase'
    }
  }
}

thirdPartyAudit {
  ignoreMissingClasses(
      'org.conscrypt.Conscrypt',
      'org.slf4j.impl.StaticLoggerBinder',
      'org.slf4j.impl.StaticMDCBinder',
      'org.slf4j.impl.StaticMarkerBinder',
      //commons-logging optional dependencies
      'org.apache.avalon.framework.logger.Logger',
      'org.apache.log.Hierarchy',
      'org.apache.log.Logger',
      'org.apache.log4j.Level',
      'org.apache.log4j.Logger',
      'org.apache.log4j.Priority',
      //commons-logging provided dependencies
      'javax.servlet.ServletContextEvent',
      'javax.servlet.ServletContextListener',
      'io.micrometer.context.ContextAccessor',
      'io.micrometer.context.ContextRegistry',
      'io.micrometer.context.ContextSnapshot',
      'io.micrometer.context.ContextSnapshot$Scope',
      'io.micrometer.context.ContextSnapshotFactory',
      'io.micrometer.context.ContextSnapshotFactory$Builder',
      'io.micrometer.context.ThreadLocalAccessor',
      'io.micrometer.core.instrument.Clock',
      'io.micrometer.core.instrument.Counter',
      'io.micrometer.core.instrument.Counter$Builder',
      'io.micrometer.core.instrument.DistributionSummary',
      'io.micrometer.core.instrument.DistributionSummary$Builder',
      'io.micrometer.core.instrument.Meter',
      'io.micrometer.core.instrument.MeterRegistry',
      'io.micrometer.core.instrument.Metrics',
      'io.micrometer.core.instrument.Tag',
      'io.micrometer.core.instrument.Tags',
      'io.micrometer.core.instrument.Timer',
      'io.micrometer.core.instrument.Timer$Builder',
      'io.micrometer.core.instrument.Timer$Sample',
      'io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics',
      'io.micrometer.core.instrument.composite.CompositeMeterRegistry',
      'io.micrometer.core.instrument.search.Search',
      'reactor.blockhound.BlockHound$Builder',
      'reactor.blockhound.integration.BlockHoundIntegration',
      'org.bouncycastle.asn1.ASN1Encodable',
      'org.bouncycastle.asn1.ASN1InputStream',
      'org.bouncycastle.asn1.ASN1Integer',
      'org.bouncycastle.asn1.ASN1Object',
      'org.bouncycastle.asn1.ASN1ObjectIdentifier',
      'org.bouncycastle.asn1.ASN1OctetString',
      'org.bouncycastle.asn1.ASN1Primitive',
      'org.bouncycastle.asn1.ASN1Sequence',
      'org.bouncycastle.asn1.ASN1String',
      'org.bouncycastle.asn1.DERBitString',
      'org.bouncycastle.asn1.DERNull',
      'org.bouncycastle.asn1.bsi.BSIObjectIdentifiers',
      'org.bouncycastle.asn1.cms.GCMParameters',
      'org.bouncycastle.asn1.eac.EACObjectIdentifiers',
      'org.bouncycastle.asn1.edec.EdECObjectIdentifiers',
      'org.bouncycastle.asn1.nist.NISTObjectIdentifiers',
      'org.bouncycastle.asn1.ocsp.OCSPResponse',
      'org.bouncycastle.asn1.ocsp.ResponderID',
      'org.bouncycastle.asn1.oiw.OIWObjectIdentifiers',
      'org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers',
      'org.bouncycastle.asn1.pkcs.PrivateKeyInfo',
      'org.bouncycastle.asn1.pkcs.RSASSAPSSparams',
      'org.bouncycastle.asn1.rosstandart.RosstandartObjectIdentifiers',
      'org.bouncycastle.asn1.x500.AttributeTypeAndValue',
      'org.bouncycastle.asn1.x500.RDN',
      'org.bouncycastle.asn1.x500.X500Name',
      'org.bouncycastle.asn1.x500.style.BCStyle',
      'org.bouncycastle.asn1.x509.AlgorithmIdentifier',
      'org.bouncycastle.asn1.x509.Certificate',
      'org.bouncycastle.asn1.x509.DigestInfo',
      'org.bouncycastle.asn1.x509.Extensions',
      'org.bouncycastle.asn1.x509.KeyPurposeId',
      'org.bouncycastle.asn1.x509.SubjectPublicKeyInfo',
      'org.bouncycastle.asn1.x509.X509ObjectIdentifiers',
      'org.bouncycastle.asn1.x9.ECNamedCurveTable',
      'org.bouncycastle.asn1.x9.X9ObjectIdentifiers',
      'org.bouncycastle.crypto.KDFCalculator',
      'org.bouncycastle.crypto.fips.FipsDRBG',
      'org.bouncycastle.crypto.fips.FipsDRBG$Base',
      'org.bouncycastle.crypto.fips.FipsDRBG$Builder',
      'org.bouncycastle.crypto.fips.FipsKDF',
      'org.bouncycastle.crypto.fips.FipsKDF$TLSOperatorFactory',
      'org.bouncycastle.crypto.fips.FipsKDF$TLSPRF',
      'org.bouncycastle.crypto.fips.FipsKDF$TLSParametersBuilder',
      'org.bouncycastle.crypto.fips.FipsKDF$TLSParametersWithPRFBuilder',
      'org.bouncycastle.crypto.fips.FipsNonceGenerator',
      'org.bouncycastle.crypto.fips.FipsSecureRandom',
      'org.bouncycastle.jcajce.io.OutputStreamFactory',
      'org.bouncycastle.jcajce.spec.DHDomainParameterSpec',
      'org.bouncycastle.jcajce.util.JcaJceHelper',
      'org.bouncycastle.math.ec.ECCurve',
      'org.bouncycastle.math.ec.ECFieldElement',
      'org.bouncycastle.math.ec.ECPoint',
      'org.bouncycastle.util.Arrays',
      'org.bouncycastle.util.BigIntegers',
      'org.bouncycastle.util.IPAddress',
      'org.bouncycastle.util.Integers',
      'org.bouncycastle.util.Pack',
      'org.bouncycastle.util.Shorts',
      'org.bouncycastle.util.Strings',
      'org.bouncycastle.util.Times',
      'org.bouncycastle.util.encoders.Hex',
      'org.bouncycastle.util.io.Streams'
   )
   ignoreViolations(
      'reactor.core.publisher.Traces$SharedSecretsCallSiteSupplierFactory$TracingException'
   )
}

tasks.withType(JavaCompile) {
  // Suppressing '[options] target value 8 is obsolete and will be removed in a future release'
  configure(options) {
    options.compilerArgs << '-Xlint:-options'
  }
}
