setup:
  - do:
      index:
        index: testidx
        id:    testing_document
        body:
            "text" : "The quick brown fox is brown."

---
"Filtering the cluster state by blocks should return the blocks field even if the response is empty":
  - do:
      cluster.state:
        metric: [ blocks ]

  - is_true: blocks
  - is_false: nodes
  - is_false: metadata
  - is_false: routing_table
  - is_false: routing_nodes
  - length:   { blocks: 0 }

---
"Filtering the cluster state by blocks should return the blocks":
  - do:
      indices.put_settings:
        index: testidx
        body:
          index.blocks.read_only: true
  - do:
      cluster.state:
        metric: [ blocks ]

  - is_true: blocks
  - is_false: nodes
  - is_false: metadata
  - is_false: routing_table
  - is_false: routing_nodes
  - length:   { blocks: 1 }

  - do:
      indices.put_settings:
        index: testidx
        body:
          index.blocks.read_only: false

---
"Filtering the cluster state by nodes only should work":
  - do:
      cluster.state:
        metric: [ nodes ]

  - is_false: blocks
  - is_true: nodes
  - is_false: metadata
  - is_false: routing_table
  - is_false: routing_nodes

---
"Filtering the cluster state by metadata only should work":
  - do:
      cluster.state:
        metric: [ metadata ]

  - is_false: blocks
  - is_false: nodes
  - is_true: metadata
  - is_false: routing_table
  - is_false: routing_nodes


---
"Filtering the cluster state by routing table only should work":
  - do:
      cluster.state:
        metric: [ routing_table ]

  - is_false: blocks
  - is_false: nodes
  - is_false: metadata
  - is_true: routing_table
  - is_false: routing_nodes

---
"Filtering the cluster state by routing nodes only should work":
  - do:
      cluster.state:
        metric: [ routing_nodes ]

  - is_false: blocks
  - is_false: nodes
  - is_false: metadata
  - is_false: routing_table
  - is_true: routing_nodes

---
"Filtering the cluster state by indices should work in routing table and metadata":
  - do:
      index:
        index: another
        id:    testing_document
        body:
            "text" : "The quick brown fox is brown."

  - do:
      cluster.state:
        metric: [ routing_table, metadata ]
        index: [ testidx ]

  - is_false: metadata.indices.another
  - is_false: routing_table.indices.another
  - is_true: metadata.indices.testidx
  - is_true: routing_table.indices.testidx

---
"Filtering the cluster state using _all for indices and metrics should work":
  - do:
      cluster.state:
        metric: [ '_all' ]
        index: [ '_all' ]

  - is_true: blocks
  - is_true: nodes
  - is_true: metadata
  - is_true: routing_table
  - is_true: routing_nodes

---
"Filtering the cluster state by indices using wildcards should work in routing table and metadata":
  - do:
      index:
        index: index1
        id:    testing_document
        body:
            "text" : "The quick brown fox is brown."

  - do:
      index:
        index: index2
        id:    testing_document
        body:
            "text" : "The quick brown fox is brown."

  - do:
      cluster.state:
        metric: [ routing_table, metadata ]
        index: [ index* ]

  - is_false: metadata.indices.testidx
  - is_false: routing_table.indices.testidx

  - is_true: metadata.indices.index1
  - is_true: routing_table.indices.index1
  - is_true: metadata.indices.index2
  - is_true: routing_table.indices.index2

---
"Filtering the cluster state returns cluster_uuid at the top level regardless of metric filters":
  - skip:
      features: allowed_warnings

  # Get the current cluster_uuid
  - do:
      cluster.state: {}
  - set: { metadata.cluster_uuid : cluster_uuid }

  - do:
      cluster.state:
        metric: [ master_node, version ]
      allowed_warnings:
        - 'Assigning [master_node] to parameter [metric] is deprecated and will be removed in 3.0. To support inclusive language, please use [cluster_manager_node] instead.'

  - match: { cluster_uuid: $cluster_uuid }
  - is_true: master_node
  - is_true: version
  - is_true: state_uuid

  - do:
      cluster.state:
        metric: [ routing_table ]
        index: testidx

  - match: { cluster_uuid: $cluster_uuid }
  - is_true: routing_table

---
"Filter the cluster state by cluster_manager_node only should work":
  - skip:
      version: " - 1.4.99"
      reason: "The metric cluster_manager_node is added to cluster state in version 2.0.0"

  - do:
      cluster.state:
        metric: [ cluster_manager_node ]

  - is_true: cluster_manager_node
  - is_false: master_node
