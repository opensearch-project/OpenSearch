setup:
  - do:
      indices.create:
          index: test
          body:
            settings:
              number_of_shards: 1
              number_of_replicas: 0
            mappings:
              properties:
                mentions:
                  type: keyword
                notifications:
                  type: keyword

  - do:
      index:
        index: test
        id: foo|bar|baz0
        body: { "notifications" : ["abc"] }

  - do:
      index:
        index: test
        id: foo|bar|baz1
        body: { "mentions" : ["abc"] }

  - do:
      indices.refresh: {}

---
"Filter aggs with terms lookup and ensure it's cached":
  # Because the filter agg rewrites the terms lookup in the rewrite phase the request can be cached
  - do:
      search:
        rest_total_hits_as_int: true
        size: 0
        request_cache: true
        body: {"aggs": { "itemsNotify": { "filter": { "terms": { "mentions": { "index": "test", "id": "foo|bar|baz0", "path": "notifications"}}}, "aggs": { "mentions" : {"terms" : { "field" : "mentions" }}}}}}

  # validate result
  - match: { hits.total: 2 }
  - match: { aggregations.itemsNotify.doc_count: 1 }
  - length: { aggregations.itemsNotify.mentions.buckets: 1 }
  - match: { aggregations.itemsNotify.mentions.buckets.0.key: "abc" }
  # we are using a lookup - this should not cache
  - do:
      indices.stats: { index: test, metric: request_cache}
  - match: { _shards.total: 1 }
  - match: { _all.total.request_cache.hit_count: 0 }
  - match: { _all.total.request_cache.miss_count: 1 }
  - is_true: indices.test

---
"Filter aggs no lookup and ensure it's cached":
  # now run without lookup and ensure we get cached or at least do the lookup
  - do:
      search:
        rest_total_hits_as_int: true
        size: 0
        request_cache: true
        body: {"aggs": { "itemsNotify": { "filter": { "terms": { "mentions": ["abc"]}}, "aggs": { "mentions" : {"terms" : { "field" : "mentions" }}}}}}

  - match: { hits.total: 2 }
  - match: { aggregations.itemsNotify.doc_count: 1 }
  - length: { aggregations.itemsNotify.mentions.buckets: 1 }
  - match: { aggregations.itemsNotify.mentions.buckets.0.key: "abc" }
  - do:
      indices.stats: { index: test, metric: request_cache}
  - match: { _shards.total: 1 }
  - match: { _all.total.request_cache.hit_count: 0 }
  - match: { _all.total.request_cache.miss_count: 1 }
  - is_true: indices.test

---
"As a child of terms":
  - do:
      bulk:
        refresh: true
        index: test
        body: |
          {"index":{}}
          {"category": "bar", "val": 8}
          {"index":{}}
          {"category": "bar", "val": 0}
  - do:
      search:
        size: 0
        body:
          aggs:
            category:
              terms:
                field: category.keyword
              aggs:
                high:
                  filter:
                    range:
                      val:
                        gte: 7

  - match: { hits.total.value: 4 }
  - match: { aggregations.category.buckets.0.key: bar }
  - match: { aggregations.category.buckets.0.doc_count: 2 }
  - match: { aggregations.category.buckets.0.high.doc_count: 1 }

---
"Sorting terms":


  - do:
      bulk:
        refresh: true
        index: test
        body: |
          {"index":{}}
          {"category": "foo", "val": 7}
          {"index":{}}
          {"category": "bar", "val": 8}
          {"index":{}}
          {"category": "bar", "val": 9}
          {"index":{}}
          {"category": "bar", "val": 0}
  - do:
      search:
        size: 0
        body:
          aggs:
            category:
              terms:
                field: category.keyword
                order:
                  high.doc_count: desc
              aggs:
                high:
                  filter:
                    range:
                      val:
                        gte: 7

  - match: { hits.total.value: 6 }
  - match: { aggregations.category.buckets.0.key: bar }
  - match: { aggregations.category.buckets.0.doc_count: 3 }
  - match: { aggregations.category.buckets.0.high.doc_count: 2 }
  - match: { aggregations.category.buckets.1.key: foo }
  - match: { aggregations.category.buckets.1.doc_count: 1 }
  - match: { aggregations.category.buckets.1.high.doc_count: 1 }
