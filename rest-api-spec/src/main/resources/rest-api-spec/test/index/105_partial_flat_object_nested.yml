---
# The test setup includes:
# - Create flat_object mapping for test_partial_flat_object_nested index
# - Index two example documents
# - Refresh the index so it is ready for search tests

setup:
  - do:
      indices.create:
        index: test_partial_flat_object_nested
        body:
          mappings:
            properties:
              issue:
                type: "nested"
                properties:
                  number:
                    type: "integer"
                  labels:
                    type: "flat_object"
  - do:
      index:
        index: test_partial_flat_object_nested
        id: 1
        body: {
          "issue": [
            {
              "number": 123,
              "labels": {
                "version": "2.2",
                "backport": [
                  "2.0",
                  "1.9"
                ],
                "category": {
                  "type": "API",
                  "level": "bug"
                },
                "createdDate": "2023-01-01",
                "comment": [ [ "Doe","Shipped" ],[ "John","Approved" ] ],
                "views": 288,
                "priority": 5.00
              }
            }
          ]
        }

  - do:
      index:
        index: test_partial_flat_object_nested
        id: 2
        body: {
          "issue": [
            {
              "number": 456,
              "labels": {
                "author": "Liu",
                "version": "2.1",
                "backport": [
                  "2.0",
                  "1.3"
                ],
                "category": {
                  "type": "API",
                  "level": "enhancement"
                },
                "createdDate": "2023-02-01",
                "comment": [ [ "Mike","LGTM" ],[ "John","Approved" ] ],
                "views": 3333,
                "priority": 1.50
              }
            }
          ]
        }

  - do:
      indices.refresh:
        index: test_partial_flat_object_nested
---
# Delete Index when connection is teardown
teardown:
  - do:
      indices.delete:
        index: test_partial_flat_object_nested


---
# Verify that mappings under the catalog field did not expand
# and no dynamic fields were created.
"Mappings":
  - skip:
      version: " - 2.6.99"
      reason: "flat_object is introduced in 2.7"

  - do:
      indices.get_mapping:
        index: test_partial_flat_object_nested
  - is_true: test_partial_flat_object_nested.mappings
  - match: { test_partial_flat_object_nested.mappings.properties.issue.properties.number.type: integer }
  - match: { test_partial_flat_object_nested.mappings.properties.issue.properties.labels.type: flat_object }
  # https://github.com/opensearch-project/OpenSearch/tree/main/rest-api-spec/src/main/resources/rest-api-spec/test#length
  - length: { test_partial_flat_object_nested.mappings.properties.issue.properties: 2 }
  - length: { test_partial_flat_object_nested.mappings.properties.issue.properties.labels: 1 }


---
"Supported queries":
  - skip:
      version: " - 2.6.99"
      reason: "flat_object is introduced in 2.7"


  # Verify Document Count
  - do:
      search:
        body: {
          query: {
            match_all: { }
          }
        }

  - length: { hits.hits: 2 }

  # Match Query with exact dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                match: { "issue.labels.version": "2.1" }
              }
            }
          }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.version: "2.1" }

  # Match Query without exact dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                match: { "issue.labels": "2.1" }
              }
            }
          }
        }
  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.version: "2.1" }

  # Term Query1 with exact dot path for date
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                term: { issue.labels.createdDate: "2023-01-01" }
              }
            } } }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.createdDate: "2023-01-01" }

  # Term Query1 without exact dot path for date
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                term: { issue.labels: "2023-01-01" }
              } } }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.createdDate: "2023-01-01" }

  # Term Query2 with dot path for string
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                term: { "issue.labels.category.type": "API" }
              } } }
        }

  - length: { hits.hits: 2 }
  - match: { hits.hits.0._source.issue.0.labels.category.type: "API" }
  - match: { hits.hits.1._source.issue.0.labels.category.type: "API" }

  # Term Query2 without exact dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                term: { issue.labels: "API" }
              } } }
        }

  - length: { hits.hits: 2 }
  - match: { hits.hits.0._source.issue.0.labels.category.type: "API" }
  - match: { hits.hits.1._source.issue.0.labels.category.type: "API" }

  # Term Query3 with dot path for array
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                term: { issue.labels.backport: "1.9" }
              } } }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.backport: [ "2.0", "1.9" ] }

  # Term Query3 without dot path for array
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                term: { issue.labels: "1.9" }
              } } }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.backport: [ "2.0", "1.9" ] }

  # Term Query4 with  dot path for nested-array
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                term: { issue.labels.comment: "LGTM" }
              } } }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Mike","LGTM" ],[ "John","Approved" ] ] }

  # Term Query4 without dot path for nested-array
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                term: { issue.labels: "LGTM" } } }
          }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Mike","LGTM" ],[ "John","Approved" ] ] }

  # Terms Query without dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                terms: { issue.labels: [ "John","Mike" ] } } }
          }
        }

  - length: { hits.hits: 2 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Doe","Shipped" ],[ "John","Approved" ] ] }
  - match: { hits.hits.1._source.issue.0.labels.comment: [ [ "Mike","LGTM" ],[ "John","Approved" ] ] }

  # Terms Query with dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                terms: { issue.labels.comment: [ "John","Mike" ] } } }
          }
        }

  - length: { hits.hits: 2 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Doe","Shipped" ],[ "John","Approved" ] ] }
  - match: { hits.hits.1._source.issue.0.labels.comment: [ [ "Mike","LGTM" ],[ "John","Approved" ] ] }

  # Prefix Query with dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "prefix": {
                  "issue.labels.comment": {
                    "value": "Mi"
                  } } }
            }
          }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Mike","LGTM" ],[ "John","Approved" ] ] }

  # Prefix Query without dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "prefix": {
                  "issue.labels": {
                    "value": "Mi"
                  }
                }
              } } }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Mike","LGTM" ],[ "John","Approved" ] ] }

  # Range Query with dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "range": {
                  "issue.labels.version": {
                    "gte": "2.1",
                    "lte": "3.0"
                  } } }
            }
          }
        }

  - length: { hits.hits: 2 }
  - match: { hits.hits.0._source.issue.0.labels.version: "2.2" }
  - match: { hits.hits.1._source.issue.0.labels.version: "2.1" }

  # Range Query without dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "range": {
                  "issue.labels": {
                    "gte": "2.1",
                    "lte": "3.0"
                  } } }
            }
          }
        }

  - length: { hits.hits: 2 }
  - match: { hits.hits.0._source.issue.0.labels.version: "2.2" }
  - match: { hits.hits.1._source.issue.0.labels.version: "2.1" }

  # Range Query with integer input with dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "range": {
                  "issue.labels.views": {
                    "gte": 3000,
                    "lte": 4000
                  } } }
            }
          }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.views: 3333 }

  # Range Query with integer input without dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "range": {
                  "issue.labels": {
                    "gte": 3000,
                    "lte": 4000
                  } } }
            }
          }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.views: 3333 }


  # Range Query with double input with dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "range": {
                  "issue.labels.priority": {
                    "gte": 4.1234,
                    "lte": 5.1234
                  } } }
            }
          }
        }
  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.priority: 5.00 }

  # Range Query with double input without dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "range": {
                  "issue.labels": {
                    "gte": 4.1234,
                    "lte": 5.1234
                  } } }
            }
          }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.priority: 5.00 }


  # Exists Query with dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "exists": {
                  "field": issue.labels.priority
                } } }
          }
        }

  - length: { hits.hits: 2 }

  # Exists Query with nested dot path, use the flat_object_field_name.last_key
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "exists": {
                  "field": issue.labels.type
                } } }
          }
        }

  - length: { hits.hits: 2 }

  # Exists Query without dot path for the flat_object_field_name
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "exists": {
                  "field": issue.labels
                } } }
          }
        }

  - length: { hits.hits: 2 }

  # Exists Query2 with dot path for one hit
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "exists": {
                  "field": issue.labels.author
                } } }
          }
        }

  - length: { hits.hits: 1 }

  # Query_string Query without dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "query_string": {
                  "fields": [ "issue.labels" ],
                  "query": "Doe OR Mike"
                } } }
          }
        }

  - length: { hits.hits: 2 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Doe","Shipped" ],[ "John","Approved" ] ] }
  - match: { hits.hits.1._source.issue.0.labels.comment: [ [ "Mike","LGTM" ],[ "John","Approved" ] ] }

  # Query_string Query with dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "query_string": {
                  "fields": [ "issue.labels.comment" ],
                  "query": "Doe OR Mike"
                } } }
          }
        }

  - length: { hits.hits: 2 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Doe","Shipped" ],[ "John","Approved" ] ] }
  - match: { hits.hits.1._source.issue.0.labels.comment: [ [ "Mike","LGTM" ],[ "John","Approved" ] ] }

  # Simple_query_string Query without full dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "simple_query_string": {
                  "query": "Doe",
                  "fields": [ "issue.labels" ]
                } } }
          }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Doe","Shipped" ],[ "John","Approved" ] ] }

  # Simple_query_string Query with dot path.
  - do:
      search:
        body: {
          _source: true,
          query: {
            nested: {
              path: "issue",
              query: {
                "simple_query_string": {
                  "query": "Doe",
                  "fields": [ "issue.labels.comment" ]
                } } }
          }
        }

  - length: { hits.hits: 1 }
  - match: { hits.hits.0._source.issue.0.labels.comment: [ [ "Doe","Shipped" ],[ "John","Approved" ] ] }
