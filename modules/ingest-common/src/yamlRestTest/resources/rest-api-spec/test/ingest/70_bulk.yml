setup:
  - do:
      ingest.put_pipeline:
        id: "pipeline1"
        body:  >
          {
            "description": "_description",
            "processors": [
              {
                "set" : {
                  "field" : "field1",
                  "value": "value1"
                }
              }
            ]
          }

  - do:
      ingest.put_pipeline:
        id: "pipeline2"
        body:  >
          {
            "description": "_description",
            "processors": [
              {
                "set" : {
                  "field" : "field2",
                  "value": "value2"
                }
              }
            ]
          }

---
teardown:
  - do:
      ingest.delete_pipeline:
        id: "pipeline1"
        ignore: 404
  - do:
      ingest.delete_pipeline:
        id: "pipeline2"
        ignore: 404
  - do:
      indices.delete_index_template:
        name: test_index_template_for_bulk
        ignore: 404

---
"Test bulk request without default pipeline":

  - do:
      bulk:
        body:
          - index:
              _index: test_index
              _id:    test_id1
              pipeline: pipeline1
          - f1: v1
          - index:
              _index: test_index
              _id:    test_id2
          - f1: v2
  - gte: { ingest_took: 0 }

  - do:
      get:
        index: test_index
        id: test_id1

  - match: {_source.field1: value1}
  - is_false: _source.field2

  - do:
      get:
        index: test_index
        id: test_id2

  - is_false: _source.field1
  - is_false: _source.field2

  - do:
      cluster.state: {}
    # Get cluster-manager node id
  - set: { cluster_manager_node: cluster_manager }

  - do:
      nodes.stats:
        metric: [ ingest ]
  #we can't assert anything here since we might have more than one node in the cluster
  - gte: {nodes.$cluster_manager.ingest.total.count: 0}
  - gte: {nodes.$cluster_manager.ingest.total.failed: 0}
  - gte: {nodes.$cluster_manager.ingest.total.time_in_millis: 0}
  - match: {nodes.$cluster_manager.ingest.total.current: 0}
  - gte: {nodes.$cluster_manager.ingest.pipelines.pipeline1.count: 0}
  - match: {nodes.$cluster_manager.ingest.pipelines.pipeline1.failed: 0}
  - gte: {nodes.$cluster_manager.ingest.pipelines.pipeline1.time_in_millis: 0}
  - match: {nodes.$cluster_manager.ingest.pipelines.pipeline1.current: 0}

---
"Test bulk request with default pipeline":

  - do:
      bulk:
        pipeline: pipeline1
        body:
          - index:
              _index: test_index
              _id:    test_id1
          - f1: v1
          - index:
              _index: test_index
              _id:    test_id2
              pipeline: pipeline2
          - f1: v2
  - gte: { ingest_took: 0 }

  - do:
      cluster.state: {}
  # Get cluster-manager node id
  - set: { cluster_manager_node: cluster_manager }

  - do:
      nodes.stats:
        metric: [ ingest ]
  #we can't assert anything here since we might have more than one node in the cluster
  - gte: {nodes.$cluster_manager.ingest.total.count: 0}
  - gte: {nodes.$cluster_manager.ingest.total.failed: 0}
  - gte: {nodes.$cluster_manager.ingest.total.time_in_millis: 0}
  - match: {nodes.$cluster_manager.ingest.total.current: 0}
  - gte: {nodes.$cluster_manager.ingest.pipelines.pipeline2.count: 0}
  - match: {nodes.$cluster_manager.ingest.pipelines.pipeline2.failed: 0}
  - gte: {nodes.$cluster_manager.ingest.pipelines.pipeline2.time_in_millis: 0}
  - match: {nodes.$cluster_manager.ingest.pipelines.pipeline2.current: 0}

  - do:
      get:
        index: test_index
        id: test_id1

  - match: {_source.field1: value1}
  - is_false: _source.field2

  - do:
      get:
        index: test_index
        id: test_id2

  - is_false: _source.field1
  - match: {_source.field2: value2}

# related issue: https://github.com/opensearch-project/OpenSearch/issues/12854
---
"Test bulk honors pipeline in update action with upsert":
  - skip:
      version: " - 2.13.99"
      reason: "fixed in 2.14.0"

  - do:
      bulk:
        refresh: true
        body:
          - '{"update": {"_index": "test_index", "_id": "test_id3", "pipeline": "pipeline1"}}'
          - '{"upsert": {"f1": "v2", "f2": 47}, "doc": {"x": 1}}'

  - match: { errors: false }
  - match: { items.0.update.result: created }

  - do:
      get:
        index: test_index
        id: test_id3
  - match: { _source: {"f1": "v2", "f2": 47, "field1": "value1"}}

# related issue: https://github.com/opensearch-project/OpenSearch/issues/12888
---
"Test bulk upsert honors default_pipeline and final_pipeline when the auto-created index matches with the index template":
  - skip:
      version: " - 2.15.99"
      reason: "fixed in 2.16.0"
      features: allowed_warnings
  - do:
      allowed_warnings:
        - "index template [test_for_bulk_upsert_index_template] has index patterns [test_bulk_upsert_*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [test_for_bulk_upsert_index_template] will take precedence during new index creation"
      indices.put_index_template:
        name: test_for_bulk_upsert_index_template
        body:
          index_patterns: test_bulk_upsert_*
          template:
            settings:
              number_of_shards:   1
              number_of_replicas: 0
              default_pipeline: pipeline1
              final_pipeline: pipeline2

  - do:
      bulk:
        refresh: true
        body:
          - '{"update": {"_index": "test_bulk_upsert_index", "_id": "test_id3"}}'
          - '{"upsert": {"f1": "v2", "f2": 47}, "doc": {"x": 1}}'

  - match: { errors: false }
  - match: { items.0.update.result: created }

  - do:
      get:
        index: test_bulk_upsert_index
        id: test_id3
  - match: { _source: {"f1": "v2", "f2": 47, "field1": "value1", "field2": "value2"}}

---
"Test bulk API with default batch size":
  - skip:
      version: " - 2.13.99"
      reason: "Added in 2.14.0"

  - do:
      bulk:
        refresh: true
        pipeline: "pipeline1"
        body:
          - '{"index": {"_index": "test_index", "_id": "test_id1"}}'
          - '{"text": "text1"}'
          - '{"index": {"_index": "test_index", "_id": "test_id2"}}'
          - '{"text": "text2"}'
          - '{"index": {"_index": "test_index", "_id": "test_id3"}}'
          - '{"text": "text3"}'
          - '{"index": {"_index": "test_index", "_id": "test_id4"}}'
          - '{"text": "text4"}'
          - '{"index": {"_index": "test_index", "_id": "test_id5", "pipeline": "pipeline2"}}'
          - '{"text": "text5"}'
          - '{"index": {"_index": "test_index", "_id": "test_id6", "pipeline": "pipeline2"}}'
          - '{"text": "text6"}'

  - match: { errors: false }

  - do:
      get:
        index: test_index
        id: test_id5
  - match: { _source: {"text": "text5", "field2": "value2"}}

  - do:
      get:
        index: test_index
        id: test_id3
  - match: { _source: { "text": "text3", "field1": "value1" } }

---
"Test bulk API with invalid batch_size":
  - skip:
      version: " - 2.13.99"
      reason: "Added in 2.14.0"

  - do:
      catch: bad_request
      bulk:
        refresh: true
        batch_size: -1
        pipeline: "pipeline1"
        body:
          - '{"index": {"_index": "test_index", "_id": "test_id1"}}'
          - '{"text": "text1"}'
          - '{"index": {"_index": "test_index", "_id": "test_id2"}}'
          - '{"text": "text2"}'
