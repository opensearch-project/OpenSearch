---
"Modify a document":
  - do:
      index:
        index:  twitter
        id:     1
        body:   { "user": "foobar" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: ctx._source.user = "other" + ctx._source.user
  - match: {created: 1}
  - match: {noops: 0}

  - do:
      search:
        rest_total_hits_as_int: true
        index: new_twitter
        body:
          query:
            match:
              user: otherfoobar
  - match: { hits.total: 1 }

---
"Modify a document based on id":
  - do:
      index:
        index:  twitter
        id:     1
        body:   { "user": "foobar" }
  - do:
      index:
        index:  twitter
        id:     2
        body:   { "user": "blort" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: if (ctx._id == "1") {ctx._source.user = "other" + ctx._source.user}
  - match: {created: 2}
  - match: {noops: 0}

  - do:
      search:
        rest_total_hits_as_int: true
        index: new_twitter
        body:
          query:
            match:
              user: otherfoobar
  - match: { hits.total: 1 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: new_twitter
        body:
          query:
            match:
              user: blort
  - match: { hits.total: 1 }

---
"Add routing":
  - do:
      index:
        index:  twitter
        id:     1
        body:   { "user": "foobar" }
  - do:
      index:
        index:  twitter
        id:     2
        body:   { "user": "foo" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: ctx._routing = ctx._source.user
  - match: {created: 2}
  - match: {noops: 0}

  - do:
      get:
        index:   new_twitter
        id:      1
        routing: foobar
  - match: { _routing: foobar }

  - do:
      get:
        index:   new_twitter
        id:      2
        routing: foo
  - match: { _routing: foo }

---
"Noop one doc":
  - do:
      index:
        index:  twitter
        id:     1
        body:   { "user": "foobar" }
  - do:
      index:
        index:  twitter
        id:     2
        body:   { "user": "foo" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: if (ctx._source.user == "foobar") {ctx._source.user = "not" + ctx._source.user} else {ctx.op = "noop"}
  - match: {created: 1}
  - match: {noops: 1}

  - do:
      search:
        rest_total_hits_as_int: true
        index: new_twitter
        body:
          query:
            match:
              user: notfoobar
  - match: { hits.total: 1 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: twitter
        body:
          query:
            match:
              user: notfoo
  - match: { hits.total: 0 }

  - do:
      count:
        index: new_twitter
  - match: {count: 1}

---
"Noop all docs":
  - do:
      index:
        index:  twitter
        id:     1
        body:   { "user": "foobar" }
  - do:
      index:
        index:  twitter
        id:     2
        body:   { "user": "foo" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: ctx.op = "noop"
  - match: {updated: 0}
  - match: {noops: 2}

  - do:
      indices.exists:
        index: new_twitter
  - is_false: ''

---
"Set version to null to force an update":
  - do:
      index:
        index:        twitter
        id:           1
        version:      1
        version_type: external
        body:         { "user": "foobar" }
  - do:
      index:
        index:        new_twitter
        id:           1
        version:      1
        version_type: external
        body:         { "user": "foobar" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
            version_type: external
          script:
            lang: painless
            source: ctx._source.user = "other" + ctx._source.user; ctx._version = null
  - match: {updated: 1}
  - match: {noops: 0}

  - do:
      search:
        rest_total_hits_as_int: true
        index: new_twitter
        body:
          query:
            match:
              user: otherfoobar
  - match: { hits.total: 1 }

---
"Set id to null to get an automatic id":
  - do:
      index:
        index:        twitter
        id:           1
        body:         { "user": "foobar" }
  - do:
      index:
        index:        new_twitter
        id:           1
        body:         { "user": "foobar" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: ctx._source.user = "other" + ctx._source.user; ctx._id = null
  - match: {created: 1}
  - match: {noops: 0}

  - do:
      search:
        rest_total_hits_as_int: true
        index: new_twitter
        body:
          query:
            match:
              user: otherfoobar
  - match: { hits.total: 1 }

---
"Change index to write to a different index":
  - do:
      index:
        index:        twitter
        id:           1
        body:         { "user": "foobar" }
  - do:
      index:
        index:        twitter
        id:           2
        body:         { "user": "another" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: if (ctx._source.user == "foobar") {ctx._index = 'other_new_twitter'}
  - match: {created: 2}
  - match: {noops: 0}

  - do:
      search:
        rest_total_hits_as_int: true
        index: other_new_twitter
        body:
          query:
            match:
              user: foobar
  - match: { hits.total: 1 }

  - do:
      search:
        rest_total_hits_as_int: true
        index: new_twitter
        body:
          query:
            match:
              user: another
  - match: { hits.total: 1 }

---
"Reindex all docs with one doc deletion":
  # Source index
  - do:
      index:
        index:  index1
        id:     1
        body:   { "lang": "en", "id": 123 }
  - do:
      index:
        index:  index1
        id:     2
        body:   { "lang": "en", "id": 456 }
  - do:
      index:
        index:  index1
        id:     3
        body:   { "lang": "fr", "id": 789 }
  # Destination index
  - do:
      index:
        index:  index2
        id:     fr_789
        body:   { "lang": "fr", "id": 789 }
  - do:
      index:
        index:  index2
        id:     en_123
        body:   { "lang": "en", "id": 123 }
  - do:
      indices.refresh: {}

  # Reindex all documents from "index1" into "index2", changing
  # their id to the concatenated lang+id fields,
  # trashing all non-english pre existing ones
  - do:
      reindex:
        refresh: true
        body:
          source:
            index: index1
          dest:
            index: index2
          script:
            lang: painless
            source: "ctx._id = ctx._source.lang + '_' + ctx._source.id;
                     if (ctx._source.lang != \"en\" ) {ctx.op = 'delete'}"
  - match: {created: 1}
  - match: {noops: 0}
  - match: {updated: 1}
  - match: {deleted: 1}

  - do:
      mget:
        body:
          docs:
            - { _index: index2, _id: en_123}
            - { _index: index2, _id: en_456}
            - { _index: index2, _id: fr_789}

  - is_true: docs.0.found
  - match:  { docs.0._index:     index2      }
  - match:  { docs.0._id:        en_123      }
  - match:  { docs.0._version:   2           }

  - is_true: docs.1.found
  - match:  { docs.1._index:     index2      }
  - match:  { docs.1._id:        en_456      }
  - match:  { docs.1._version:   1           }

  - is_false: docs.2.found
  - match:  { docs.2._index:     index2      }
  - match:  { docs.2._id:        fr_789      }

---
"Totally broken scripts report the error properly":
  - do:
      index:
        index:  twitter
        id:     1
        body:   { "user": "foobar" }
  - do:
      indices.refresh: {}

  - do:
      catch: bad_request
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: syntax errors are fun!
  - match: {error.reason: 'compile error'}

# script in reindex supports java.lang.String.sha1() and java.lang.String.sha256() methods
# related issue: https://github.com/opensearch-project/OpenSearch/issues/16423
---
"Script supports sha1() and sha256() method for strings":
  - skip:
      version: " - 2.18.99"
      reason: "introduced in 2.19.0"
  - do:
      index:
        index:  twitter
        id:     1
        body:   { "user": "foobar" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter
          script:
            lang: painless
            source: ctx._source.user_sha1 = ctx._source.user.sha1();ctx._source.user_sha256 = ctx._source.user.sha256()
  - match: {created: 1}
  - match: {noops: 0}

  - do:
      get:
        index:  new_twitter
        id:     1

  - match: { _source.user:        foobar }
  - match: { _source.user_sha1:      "8843d7f92416211de9ebb963ff4ce28125932878"   }
  - match: { _source.user_sha256:      "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2"   }
